class Controller is subclass of Equipment
types
	public ControllerMode = <Controller> | <SparePart>;
	
	private ControllerState = <Idle> |
		<SearchingForKeyVault> | 
		<WaitingToJoin> |
		<WaitingForChallengeSolvedAcknowledgement> |
		<WaitingForChallengeSolvedReply> |
		<WaitingForNewEffectiveCertificate> |
		<Connected> |
		<Undefined>;
	
values
	private sparePartStatesSequence: seq of ControllerState = [
		<Idle>,
		<SearchingForKeyVault>,
		<WaitingToJoin>,
		<WaitingForChallengeSolvedAcknowledgement>,
		<WaitingForChallengeSolvedReply>,
		<WaitingForNewEffectiveCertificate>,
		<Connected>
	];

	private controllerStatesSequence: seq of ControllerState = [
		<Connected>,
		<WaitingForNewEffectiveCertificate>
	];


instance variables
	private state: ControllerState :=  <Idle>;
	private id: seq of char;
	private mode: ControllerMode := <SparePart>;
	
	inv state <> undefinedState;
	
operations
	public Controller: seq of char ==> Controller
	Controller(newId) == (
		id := newId;
	);
	
	public NextState: Message ==> ()
	NextState(message) == (
		cases message.GetMessageType():
			"BroadcastToSearchKeyVault" -> state := <SearchingForKeyVault>,
			"JoinRequest" -> state := <WaitingToJoin>,
			"SendChallengeAnswer" -> state := <WaitingForChallengeSolvedAcknowledgement>,
			"SendChallenge" -> state := <WaitingForChallengeSolvedReply>,
			"SendNewEffectivePublicKey" -> state := <WaitingForNewEffectiveCertificate>,
			"SendNewEffectiveCertificateAcknoledgement" -> state := <Connected>,
			others -> state := undefinedState
		end;
	)
	pre id = message.GetControllerId()
	post (
		if mode = <SparePart> then 
			state = GetNextStateFromSequenceUsingCurrentState[ControllerState](sparePartStatesSequence, state~) -- state~ is the previous state
		else 
			state = GetNextStateFromSequenceUsingCurrentState[ControllerState](controllerStatesSequence, state~)
	) and state <> state~;

	public pure GetMode: () ==> ControllerMode
	GetMode() == return mode;

	public pure GetId: () ==> seq of char
	GetId() == return id;

end Controller