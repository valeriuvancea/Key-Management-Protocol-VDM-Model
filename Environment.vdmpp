class Environment
types
    private MessageArgumentType = seq of char | real | int | bool | token | map seq of char to MessageArgumentType | seq of MessageArgumentType;
    private MessageRead = map seq of char to MessageArgumentType;

instance variables
    public io: IO := new IO();
    private messages: seq of BaseMessage := [];
    private controllers: map seq of char to Controller := { |-> };
    private keyVault: KeyVault := new KeyVault();

operations
    public Run: (seq of char) ==> ()
    Run(traceFilePath) == (
        let mk_(-, messageTraces) = io.freadval[seq of MessageRead](traceFilePath) in (
            for i = 1 to len messageTraces do (
                let message: BaseMessage = MessageReadAsMessage(messageTraces(i)) in (
                    ProcessMessage(message);

                    io.print("Created and processed message:\n");
                    io.print("    type: ");io.print(message.GetMessageType());io.print("\n");
                    io.print("    controller id: ");io.print(message.GetControllerId());io.print("\n");
                )
            )    
        );
        io.print("Done");
    );

    public ProcessMessage: BaseMessage ==> ()
    ProcessMessage(message) == (
        let 
            controllerId = message.GetControllerId(),
            messageType = message.GetMessageType() in
        (
            if controllerId not in set dom controllers then
                let controller = new Controller(controllerId) in (
                    AddController(controller);
                    keyVault.AddController(controller);
                );
            
            cases messageType:
                "SendNewEffectiveCertificate",
                "SendNewEffectiveCertificateAcknoledgement" -> (
                    controllers(controllerId).NextState(message);
                    keyVault.NextState(message);
                ),
                "BroadcastToSearchControllers" -> (
                    ProcessControllerSearchBroadcast(message);
                ),
                others -> (
                    if messageType in set BaseMessageBetweenControllers`messageBetweenControllersTypes then (
                        ProcessMessageBetweenControllers(message);
                    ) else if message.IsForKeyVault() then (
                        controllers(controllerId).NextState(message);
                    ) else if not message.IsForKeyVault() then (
                        keyVault.NextState(message);
                    )
                )
            end;
        )
    );

    private ProcessControllerSearchBroadcast: BroadcastToSearchControllersMessage ==> ()
    ProcessControllerSearchBroadcast(message) == (
        skip;
    ) pre IsControllerConnected(message.GetControllerId());

    private ProcessMessageBetweenControllers: BaseMessageBetweenControllers ==> ()
    ProcessMessageBetweenControllers(message) == (
        if message.GetMessageType() = ControllerSearchBroadcastAcknowledgementMessage`typeString then (
            ProcessControllerSearchBroadcastAcknowledgement(message)
        ) else if message.GetMessageType() = ControllerCertificateUpdateMessage`typeString then (
            ProcessControllerCertificateUpdateMessage(message)
        )
    ) pre (
        IsControllerConnected(message.GetSenderId()) and
        IsControllerConnected(message.GetReceiverId())
    );

    private ProcessControllerSearchBroadcastAcknowledgement: ControllerSearchBroadcastAcknowledgementMessage ==> ()
    ProcessControllerSearchBroadcastAcknowledgement(message) == (
        skip;
    ) pre (
        controllers(message.GetSenderId()).GetEffectiveCertificate() = message.GetEffectiveCertificate()
    );

    private ProcessControllerCertificateUpdateMessage: ControllerCertificateUpdateMessage ==> ()
    ProcessControllerCertificateUpdateMessage(message) == (
        skip;
    ) pre (
        controllers(message.GetSenderId()).GetEffectiveCertificate() = message.GetEffectiveCertificate()
    );

    pure private IsControllerConnected: seq of char ==> bool
    IsControllerConnected(controllerId) == (
        return controllerId in set dom controllers and controllers(controllerId).GetMode() = <Controller>
    );

    private AddController: Controller ==> ()
	AddController(controller) == (
        controllers := controllers ++ { controller.GetId() |-> controller }
    )
	pre controller.GetId() not in set dom controllers;

    private MessageReadAsMessage: MessageRead ==> BaseMessage
	MessageReadAsMessage(messageTrace) == (
        let
            messageType: seq of char = messageTrace("type"),
            controllerId: seq of char = messageTrace("controller_id"),
            isForKeyVault: bool = messageTrace("isForKeyVault") in
        ( 
            cases messageType:
                "SendKeyVaultCertificate" ->
                    return new SendKeyVaultCertificateMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("cert_kv")),
                "SendNewEffectiveCertificate" ->
                    return new SendNewEffectiveCertificateMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("cert_eff"),
                        messageTrace("cert_ca")),
                "SendNewEffectivePublicKey" ->
                    return new SendNewEffectivePublicKeyMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("pk_eff"),
                        messageTrace("hash")),
                "JoinRequest" ->
                    return new JoinRequestMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("cert_ct")),
                "ControllerSearchBroadcastAcknowledgement" ->
                    return new ControllerSearchBroadcastAcknowledgementMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("sender_id"),
                        messageTrace("cert_eff")),
                "ControllerCertificateUpdate" ->
                    return new ControllerCertificateUpdateMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("sender_id"),
                        messageTrace("cert_eff")),
                "DummyMessage" ->
                    return new DummyMessage(
                        messageType,
                        controllerId,
                        isForKeyVault,
                        messageTrace("sender_id"),
                        messageTrace("encrypted_data")),
                "BroadcastToSearchControllers" ->
                    return new BroadcastToSearchControllersMessage(
                        messageType,
                        controllerId,
                        isForKeyVault),
                others ->
                    return new BaseMessage(
                        messageType,
                        controllerId,
                        isForKeyVault)
            end;
        );
    ) pre {"type", "controller_id", "isForKeyVault"} subset dom messageTrace;
	
end Environment