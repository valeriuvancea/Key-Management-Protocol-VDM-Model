class BaseMessage is subclass of MessageInterface
values
    protected messageTypes: set of seq of char = {
        "BroadcastToSearchKeyVault",
        "KeyVaultSearchBroadcastAcknowledgement",
        "JoinRequest",
        "SendChallenge",
        "SendChallengeAnswer",
        "SendKeyVaultCertificate",
        "SendNewEffectivePublicKey",
        "SendNewEffectiveCertificate",
        "SendNewEffectiveCertificateAcknoledgement",
        "SendReKeyRequest",
        "BroadcastToSearchControllers",
        "ControllerSearchBroadcastAcknowledgement",
        "DummyMessage"
    };

instance variables

    inv {"isForKeyVault", "isBetweenControllers"} inter GetMessageFieldsNames() <> {} =>
        IsForKeyVault() => IsBetweenControllers() <> true and
        IsBetweenControllers() => IsForKeyVault() <> true

operations
    public BaseMessage: seq of char * seq of char * bool * bool ==> BaseMessage
    BaseMessage(messageType, controllerId, isForKeyVault, isBetweenControllers) == (
        AddField("messageType", messageType);
        AddField("controllerId", controllerId);
        AddField("isForKeyVault", isForKeyVault);
        AddField("isBetweenControllers", isBetweenControllers);
    )
    pre messageType in set messageTypes;

    public pure GetMessageType: () ==> seq of char
    GetMessageType() == return GetField("messageType");

    public pure GetControllerId: () ==> seq of char
    GetControllerId() == return GetField("controllerId");

    public pure IsForKeyVault: () ==> bool
    IsForKeyVault() == return GetField("isForKeyVault");

    public pure IsBetweenControllers: () ==> bool
    IsBetweenControllers() == return GetField("isBetweenControllers");

end BaseMessage