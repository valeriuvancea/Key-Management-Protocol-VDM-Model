class Message  is subclass of MessageInterface
values
    protected messageTypes: set of seq of char = {
        "BroadcastToSearchKeyVault",
        "KeyVaultSearchBroadcastAcknowledgement",
        "JoinRequest",
        "SendChallenge",
        "SendChallengeAnswer",
        "SendKeyVaultCertificate",
        "SendNewEffectivePublicKey",
        "SendNewEffectiveCertificate",
        "SendNewEffectiveCertificateAcknoledgement"
    };

instance variables
    private messageType: seq of char;
    private controllerId: token;
    private isForKeyVault: bool;
    private isBetweenControllers: bool;

    inv if (isForKeyVault) then isBetweenControllers <> true
        else if (isBetweenControllers) then isForKeyVault <> true
             else true

operations
    public Message: seq of char * token * bool * bool ==> Message
    Message(type, controllerID, forKeyVault, betweenControllers) == (
        messageType := type;
        controllerId := controllerID;
        isForKeyVault := forKeyVault;
        isBetweenControllers := betweenControllers;
    );

    public pure GetMessageType: () ==> seq of char
    GetMessageType() == return messageType;

    public pure GetControllerId: () ==> token
    GetControllerId() == return controllerId;

    public pure IsForKeyVault: () ==> bool
    IsForKeyVault() == return isForKeyVault;

    public pure IsBetweenControllers: () ==> bool
    IsBetweenControllers() == return isBetweenControllers;

end Message